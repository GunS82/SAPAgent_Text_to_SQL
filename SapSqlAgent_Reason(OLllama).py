# main.py
# –ê–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è NL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ SQL –¥–ª—è SAP —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API

import json
import os
import sys
from typing import Any, Dict, List, Literal, Optional, Union
from annotated_types import Ge, Le, MaxLen, MinLen, Annotated
from pydantic import BaseModel, Field, ValidationError
import httpx
from openai import OpenAI

from sap_tools import run_sap_sql_query, are_tables_present, get_table_fields, get_domain_texts
from db_logger import DBLogger
from utils import extract_json_object

# ===== –°–•–ï–ú–´ =====
class Tool_GetTableFields(BaseModel):
    tool: Literal["gettablefields"]
    table_name: Annotated[str, MinLen(1), MaxLen(40)]

class Tool_GetDomainTexts(BaseModel):
    tool: Literal["get_domain_texts"]
    domain_name: Annotated[str, MinLen(1), MaxLen(40)]

class Tool_RunSapSqlQuery(BaseModel):
    tool: Literal["runsapsql_query"]
    query: Annotated[str, MinLen(10)]
    name: Optional[Annotated[str, MinLen(2), MaxLen(40)]] = None

class FinalAnswer(BaseModel):
    intent_summary: Annotated[str, MinLen(8), MaxLen(400)]
    sql_used: Annotated[str, MinLen(10)]
    result_summary: Annotated[str, MinLen(8), MaxLen(2000)]
    confidence: Annotated[float, Ge(0.0), Le(1.0)]

class Step_SelectTables(BaseModel):
    kind: Literal["select_tables"]
    thought: Annotated[str, MinLen(10)]
    tables_to_verify: Annotated[List[str], MinLen(1)]

class Step_ExploreAndProbe(BaseModel):
    kind: Literal["explore_and_probe"]
    thought: Annotated[str, MinLen(10)]
    actions: Annotated[List[Union[Tool_GetTableFields, Tool_RunSapSqlQuery, Tool_GetDomainTexts]], MinLen(1)]

class Step_ExecuteFinalQuery(BaseModel):
    kind: Literal["execute_final_query"]
    thought: Annotated[str, MinLen(10)]
    final_sql: Annotated[str, MinLen(10)]

class Step_ProvideFinalAnswer(BaseModel):
    kind: Literal["provide_final_answer"]
    answer: FinalAnswer

class NextStep(BaseModel):
    next_step: Union[Step_SelectTables, Step_ExploreAndProbe, Step_ExecuteFinalQuery, Step_ProvideFinalAnswer]

# ===== –ü–†–û–ú–ü–¢ =====
SCHEMA_JSON = json.dumps(NextStep.model_json_schema(), indent=2, ensure_ascii=False)

SYSTEM_PROMPT = f"""
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ SAP (ECC/S/4). –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQL –ø–æ—à–∞–≥–æ–≤–æ. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - Hana DB2.
–ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ –≤–µ—Ä–Ω–∏ –†–û–í–ù–û –û–î–ò–ù JSON –ø–æ —Å—Ö–µ–º–µ .

–ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
- are_tables_present
- get_table_fields
- run_sap_sql_query
- get_domain_texts

–ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´:
- CDS/HANA views –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. Z* –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å.
- –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü ‚Äî –≤—ã–∑—ã–≤–∞–π select_tables, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü ‚Äî gettablefields, –ø–æ–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–æ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É - get_domain_texts.
- –†–∞–∑—Ä–µ—à–µ–Ω—ã –ø—Ä–æ–±–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è run_sap_sql_query. –î–ª—è –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORDER BY –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏ LIMIT –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!!
- –§–∏–Ω–∞–ª—å–Ω—ã–π SQL - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ , –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –û–¢–í–ï–¢–ê:
- –£ –º–Ω–æ–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å(header), –∏ –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–¥–ø–æ–∑–∏—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å—ã –∏—Ç–ø. –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ —Å–≤—è–∑—è—Ö –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–æ–º–µ—Ä—É, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
- –î–ª—è SAP –ø–æ–ª–µ–π —Ç–∏–ø–∞ NUMC –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω—É—é –¥–ª–∏–Ω—É —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
- –ï—Å–ª–∏ —Å—Ç–∞–≤–∏—à—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –¥–æ–º–µ–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ
- –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ª–µ–π —Ç–∞–±–ª–∏—Ü –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ DOMNAME - —ç—Ç–æ –¥–æ–º–µ–Ω, –∏ –Ω–∞ CHECKTABLE - –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—è. ENTITYTAB - —Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–º–µ–Ω–∞.

–í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û JSON –ü–û –°–•–ï–ú–ï.

{SCHEMA_JSON}
""".strip()

# ===== –§–£–ù–ö–¶–ò–ò –í–´–í–û–î–ê =====
def clear_console():
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
    if sys.platform.startswith('win'):
        os.system('cls')
    else:
        os.system('clear')

def print_query(query: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüîç –ó–∞–ø—Ä–æ—Å: {query}\n")

def print_step_header(step_num: int):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞"""
    print(f"\n‚ñ∂ –®–ê–ì {step_num}")

def print_thought(thought: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –º—ã—Å–ª—å –∞–≥–µ–Ω—Ç–∞"""
    print(f"üí≠ –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ: {thought}")

def print_tool_call(tool_name: str, params: Dict[str, Any]):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print(f"üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
    for key, value in params.items():
        if key == "sql" or key == "query":
            print(f"   üìù {key}: {value}")
        else:
            print(f"   ‚Ä¢ {key}: {value}")

def print_final_answer(answer: Dict[str, Any]):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ"""
    print(f"\n‚ú® –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢\n")
    print(f"üìã –°—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞: {answer['intent_summary']}\n")
    print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π SQL: {answer['sql_used']}\n")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {answer['result_summary']}\n")
    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer['confidence']*100:.1f}%\n")

# ===== –ö–õ–ò–ï–ù–¢ OPENAI =====
def create_openai_client(base_url: str, api_key: Optional[str] = None) -> OpenAI:
    """–°–æ–∑–¥–∞–Ω–∏–µ OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Ollama/—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ API"""
    if not api_key:
        api_key = "ollama"

    # –°–æ–∑–¥–∞—ë–º http –∫–ª–∏–µ–Ω—Ç —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
    http_client = httpx.Client(verify=False)

    return OpenAI(
        base_url=base_url.rstrip("/") + "/v1",
        api_key=api_key,
        http_client=http_client
    )

def stream_chat_completion(client: OpenAI, model: str, messages: List[Dict[str, str]], timeout: int = 180) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç streaming –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    try:
        stream = client.chat.completions.create(
            model=model,
            messages=messages,
            stream=True,
            timeout=timeout
        )

        full_response = ""
        for chunk in stream:
            if chunk.choices and len(chunk.choices) > 0:
                delta = chunk.choices[0].delta
                if delta.content is not None:
                    full_response += delta.content

        return full_response

    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")

# ===== –ê–ì–ï–ù–¢ =====
def run_sgr_agent_adaptive(
    nl_query: str,
    max_steps: int = 20,
    base_url: str = os.getenv("OLLAMA_BASE_URL"),
    api_key: str = os.getenv("OLLAMA_API_KEY"),
    model: str = os.getenv("OLLAMA_MODEL"),
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è NL –∑–∞–ø—Ä–æ—Å–∞ –≤ SQL —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API

    Args:
        nl_query: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-—è–∑—ã–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞
        base_url: URL Ollama/OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ API
        api_key: API –∫–ª—é—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è Ollama)
        model: –ò–º—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "ChatAI GPT-4.1 mini")
    """

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –∏ –≤—ã–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –≤ –Ω–∞—á–∞–ª–µ
    clear_console()
    print_query(nl_query)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    client = create_openai_client(base_url, api_key)
    db = DBLogger()
    db.connect()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages: List[Dict[str, str]] = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": f"–ó–∞–¥–∞—á–∞: {nl_query}"},
    ]

    db.log_message(turn_index=0, role="system", content=SYSTEM_PROMPT, meta={"kind": "system_prompt"})
    db.log_message(turn_index=1, role="user", content=f"–ó–∞–¥–∞—á–∞: {nl_query}")

    bad_json_streak = 0
    final_dialog_id: Optional[int] = None
    step_counter = 0

    try:
        for iteration in range(1, max_steps + 1):
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ API
            resp_text = stream_chat_completion(client, model, messages, timeout=180)

            messages.append({"role": "assistant", "content": resp_text})
            db.log_message(
                turn_index=len(messages) - 1, 
                role="assistant", 
                content=resp_text, 
                meta={"raw_stream": True, "iteration": iteration}, 
                dialog_id=final_dialog_id
            )

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            job = extract_json_object(resp_text)
            if not job:
                bad_json_streak += 1
                correction = "–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω JSON –ø–æ —Å—Ö–µ–º–µ NextStep."
                messages.append({"role": "user", "content": correction})
                db.log_message(
                    turn_index=len(messages) - 1, 
                    role="user", 
                    content=correction, 
                    meta={"reason": "bad_json"}, 
                    dialog_id=final_dialog_id
                )
                if bad_json_streak >= 3:
                    example = {
                        "next_step": {
                            "kind": "select_tables",
                            "thought": "–ü–æ—è—Å–Ω–µ–Ω–∏–µ‚Ä¶",
                            "tables_to_verify": ["VBRK", "VBRP"]
                        }
                    }
                    hint = f"–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –í–µ—Ä–Ω–∏ JSON –ø–æ —Å—Ö–µ–º–µ. –ü—Ä–∏–º–µ—Ä:\n```json\n{json.dumps(example, ensure_ascii=False, indent=2)}\n```"
                    messages.append({"role": "user", "content": hint})
                    db.log_message(
                        turn_index=len(messages) - 1, 
                        role="user", 
                        content=hint, 
                        meta={"reason": "bad_json_example"}, 
                        dialog_id=final_dialog_id
                    )
                continue

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
            try:
                plan = NextStep(**job)
            except ValidationError as e:
                bad_json_streak += 1
                correction = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON: {str(e)}. –í–µ—Ä–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –ø–æ —Å—Ö–µ–º–µ."
                messages.append({"role": "user", "content": correction})
                db.log_message(
                    turn_index=len(messages) - 1, 
                    role="user", 
                    content=correction, 
                    meta={"reason": "validation_error", "error": str(e)}, 
                    dialog_id=final_dialog_id
                )
                if bad_json_streak >= 3:
                    example = {
                        "next_step": {
                            "kind": "select_tables",
                            "thought": "–ü–æ—è—Å–Ω–µ–Ω–∏–µ‚Ä¶",
                            "tables_to_verify": ["VBRK", "VBRP"]
                        }
                    }
                    hint = f"–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –í–µ—Ä–Ω–∏ JSON –ø–æ —Å—Ö–µ–º–µ. –ü—Ä–∏–º–µ—Ä:\n```json\n{json.dumps(example, ensure_ascii=False, indent=2)}\n```"
                    messages.append({"role": "user", "content": hint})
                    db.log_message(
                        turn_index=len(messages) - 1, 
                        role="user", 
                        content=hint, 
                        meta={"reason": "validation_error_example"}, 
                        dialog_id=final_dialog_id
                    )
                continue

            bad_json_streak = 0
            step = plan.next_step

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            normalized = json.dumps(job, ensure_ascii=False, indent=2)
            messages.append({"role": "assistant", "content": normalized})
            db.log_message(
                turn_index=len(messages) - 1, 
                role="assistant", 
                content=normalized, 
                meta={"normalized": True}, 
                dialog_id=final_dialog_id
            )

            # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            step_counter += 1
            print_step_header(step_counter)

            tool_results: List[Dict[str, Any]] = []

            if isinstance(step, Step_SelectTables):
                print_thought(step.thought)
                names = list(dict.fromkeys([t.upper() for t in step.tables_to_verify]))
                print_tool_call("are_tables_present", {"tables": names})
                result = are_tables_present(names)
                tool_results.append({"tool": "aretablespresent", "input": names, "result": result})

            elif isinstance(step, Step_ExploreAndProbe):
                print_thought(step.thought)
                for action in step.actions:
                    if isinstance(action, Tool_GetTableFields):
                        print_tool_call("get_table_fields", {"table_name": action.table_name})
                        result = get_table_fields(action.table_name)
                        tool_results.append({"tool": "gettablefields", "table": action.table_name, "result": result})
                    elif isinstance(action, Tool_GetDomainTexts):
                        print_tool_call("get_domain_texts", {"domain_name": action.domain_name})
                        result = get_domain_texts(action.domain_name)
                        tool_results.append({"tool": "get_domain_texts", "domain": action.domain_name, "result": result})
                    elif isinstance(action, Tool_RunSapSqlQuery):
                        params = {"query": action.query}
                        if action.name:
                            params["name"] = action.name
                        print_tool_call("run_sap_sql_query", params)
                        result = run_sap_sql_query(action.query)
                        tool_results.append({
                            "tool": "runsapsql_query", 
                            "name": action.name, 
                            "sql": action.query, 
                            "result": result
                        })

            elif isinstance(step, Step_ExecuteFinalQuery):
                print_thought(step.thought)
                print_tool_call("final_sql_execution", {"sql": step.final_sql})
                result = run_sap_sql_query(step.final_sql)
                tool_results.append({"tool": "final_sql_execution", "sql": step.final_sql, "result": result})

            elif isinstance(step, Step_ProvideFinalAnswer):
                final_dialog_id = db.log_final_answer(nl_query, step.answer.model_dump())
                db.backfill_dialog_id(final_dialog_id)
                final_msg = json.dumps(step.answer.model_dump(), ensure_ascii=False)
                messages.append({"role": "assistant", "content": final_msg})
                db.log_message(
                    turn_index=len(messages) - 1, 
                    role="assistant", 
                    content=final_msg, 
                    meta={"final_answer": True}, 
                    dialog_id=final_dialog_id
                )

                # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                print_final_answer(step.answer.model_dump())

                return {"final_answer": step.answer.model_dump(), "history": messages}

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å
            if tool_results:
                blob = json.dumps(tool_results, ensure_ascii=False, indent=2)
                messages.append({"role": "user", "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:\n{blob}"})
                db.log_message(
                    turn_index=len(messages) - 1, 
                    role="user", 
                    content=blob, 
                    meta={"tool_results": True},
                    dialog_id=final_dialog_id
                )

        raise TimeoutError("–õ–∏–º–∏—Ç —à–∞–≥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

    finally:
        db.close()

if __name__ == "__main__":
    query = os.getenv("QUERY", "–°–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤ –∏–∑ –ù—å—é-–ô–æ—Ä–∫–∞?")
    try:
        out = run_sgr_agent_adaptive(query)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}\n")
        import traceback
        traceback.print_exc()
